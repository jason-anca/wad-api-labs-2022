{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\wad-api-labs-2022\\\\movies-app\\\\src\\\\components\\\\TVComponents\\\\templateTVPage\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TVHeader from \"../headerTV\";\nimport Grid from \"@mui/material/Grid\";\nimport ImageList from \"@mui/material/ImageList\";\nimport ImageListItem from \"@mui/material/ImageListItem\";\nimport { getTVImages } from \"../../../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from '../../spinner';\nimport { FormControlUnstyledContext } from \"@mui/base\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar TemplateTVPage = function TemplateTVPage(_ref) {\n  _s();\n\n  var tv = _ref.tv,\n      children = _ref.children;\n\n  var _useQuery = useQuery([\"images\", {\n    id: tv.id\n  }], getTVImages),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError;\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, _this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var images = data.posters;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TVHeader, {\n      tv: tv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      sx: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ImageList, {\n            cols: 1,\n            children: images.map(function (image) {\n              return /*#__PURE__*/_jsxDEV(ImageListItem, {\n                cols: 1,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"https://image.tmdb.org/t/p/w500/\".concat(image.file_path),\n                  alt: image.profile_path\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 21\n                }, _this)\n              }, image.file_path, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(TemplateTVPage, \"iNS8hSU1iW9Nl53DVn/2qjlUFlg=\", false, function () {\n  return [useQuery];\n});\n\n_c = TemplateTVPage;\nexport default TemplateTVPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TemplateTVPage\");","map":{"version":3,"names":["React","useState","useEffect","TVHeader","Grid","ImageList","ImageListItem","getTVImages","useQuery","Spinner","FormControlUnstyledContext","TemplateTVPage","tv","children","id","data","error","isLoading","isError","message","images","posters","padding","display","flexWrap","justifyContent","map","image","file_path","profile_path"],"sources":["C:/Users/Jason/Documents/GitHub/wad-api-labs-2022/movies-app/src/components/TVComponents/templateTVPage/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TVHeader from \"../headerTV\";\nimport Grid from \"@mui/material/Grid\";\nimport ImageList from \"@mui/material/ImageList\";\nimport ImageListItem from \"@mui/material/ImageListItem\";\nimport { getTVImages } from \"../../../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from '../../spinner';\nimport { FormControlUnstyledContext } from \"@mui/base\";\n\nconst TemplateTVPage = ({ tv, children }) => {\n  const { data , error, isLoading, isError } = useQuery(\n    [\"images\", { id: tv.id }],\n    getTVImages\n  );\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  if (isError) {\n    return <h1>{error.message}</h1>;\n  }\n  const images = data.posters\n  return (\n    <>\n      <TVHeader tv={tv} />\n      <Grid container spacing={5} sx={{ padding: \"15px\" }}>\n        <Grid item xs={3}>\n          <div sx={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\",\n          }}>\n            <ImageList \n                cols={1}>\n                {images.map((image) => (\n                    <ImageListItem key={image.file_path} cols={1}>\n                    <img\n                        src={`https://image.tmdb.org/t/p/w500/${image.file_path}`}\n                        alt={image.profile_path}\n                    />\n                    </ImageListItem>\n                ))}\n            </ImageList>\n          </div>\n        </Grid>\n\n        <Grid item xs={9}>\n          {children}\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default TemplateTVPage;\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,0BAAT,QAA2C,WAA3C;;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAsB;EAAA;;EAAA,IAAnBC,EAAmB,QAAnBA,EAAmB;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EAC3C,gBAA6CL,QAAQ,CACnD,CAAC,QAAD,EAAW;IAAEM,EAAE,EAAEF,EAAE,CAACE;EAAT,CAAX,CADmD,EAEnDP,WAFmD,CAArD;EAAA,IAAQQ,IAAR,aAAQA,IAAR;EAAA,IAAeC,KAAf,aAAeA,KAAf;EAAA,IAAsBC,SAAtB,aAAsBA,SAAtB;EAAA,IAAiCC,OAAjC,aAAiCA,OAAjC;;EAKA,IAAID,SAAJ,EAAe;IACb,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,SAAP;EACD;;EAED,IAAIC,OAAJ,EAAa;IACX,oBAAO;MAAA,UAAKF,KAAK,CAACG;IAAX;MAAA;MAAA;MAAA;IAAA,SAAP;EACD;;EACD,IAAMC,MAAM,GAAGL,IAAI,CAACM,OAApB;EACA,oBACE;IAAA,wBACE,QAAC,QAAD;MAAU,EAAE,EAAET;IAAd;MAAA;MAAA;MAAA;IAAA,SADF,eAEE,QAAC,IAAD;MAAM,SAAS,MAAf;MAAgB,OAAO,EAAE,CAAzB;MAA4B,EAAE,EAAE;QAAEU,OAAO,EAAE;MAAX,CAAhC;MAAA,wBACE,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE,CAAf;QAAA,uBACE;UAAK,EAAE,EAAE;YACPC,OAAO,EAAE,MADF;YAEPC,QAAQ,EAAE,MAFH;YAGPC,cAAc,EAAE;UAHT,CAAT;UAAA,uBAKE,QAAC,SAAD;YACI,IAAI,EAAE,CADV;YAAA,UAEKL,MAAM,CAACM,GAAP,CAAW,UAACC,KAAD;cAAA,oBACR,QAAC,aAAD;gBAAqC,IAAI,EAAE,CAA3C;gBAAA,uBACA;kBACI,GAAG,4CAAqCA,KAAK,CAACC,SAA3C,CADP;kBAEI,GAAG,EAAED,KAAK,CAACE;gBAFf;kBAAA;kBAAA;kBAAA;gBAAA;cADA,GAAoBF,KAAK,CAACC,SAA1B;gBAAA;gBAAA;gBAAA;cAAA,SADQ;YAAA,CAAX;UAFL;YAAA;YAAA;YAAA;UAAA;QALF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,SADF,eAqBE,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE,CAAf;QAAA,UACGf;MADH;QAAA;QAAA;QAAA;MAAA,SArBF;IAAA;MAAA;MAAA;MAAA;IAAA,SAFF;EAAA,gBADF;AA8BD,CA5CD;;GAAMF,c;UACyCH,Q;;;KADzCG,c;AA8CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}